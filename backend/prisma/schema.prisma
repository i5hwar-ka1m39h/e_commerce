// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User{
  userId String @id @default(uuid())
  userName String @unique
  password String
  email String @unique
  createAt  DateTime @default(now())
  isAdmin  Boolean @default(false)
  orders Order[]
  products Product[] @relation("AdminsProduct")
}

model Product{
  productId String @id @default(uuid())
  productName String
  productDescription String?
  productPrice Decimal
  quantity Int
  adminId String
  admin User @relation("AdminsProduct",fields: [adminId], references: [userId])
  createdAt DateTime @default(now())
  orderDetail OrderDetail[]
  categoryId String
  category Category @relation(fields: [categoryId], references: [categoryId])
  
}

model Category{
  categoryId String @id @default(uuid())
  categoryName String @unique
  categoryDescription String?
  products Product[]
}

model Order{
  orderId String @id @default(uuid())
  total Decimal
  status String
  userId String
  user User @relation(fields: [userId], references: [userId])
  createdAt DateTime @default(now())
  details OrderDetail[]

}


model OrderDetail{
  order Order @relation(fields: [orderId], references: [orderId])
  orderId String 
  product Product @relation(fields: [productId], references: [productId])
  productId String
  quantity Int
  price Decimal
  createdAt DateTime @default(now())
  @@id([productId, orderId])

}